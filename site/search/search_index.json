{
    "docs": [
        {
            "location": "/", 
            "text": "Visual Layout Api\n\n\nlayout(\n    100,\n    |-email-| ~ 80,\n    8,\n    |-password-forgot-| ~ 80,\n    \n=20,\n    |login| ~ 80,\n    0\n)\n\n\n\n\nChainable Api\n\n\nemail.top(100).left(8).right(8).width(200).height(44)\nalignHorizontally(password, forgot)\nimage.fillContainer()\nbutton.centerInContainer().size(50%)\nequalWidths(email, password)\nimage.width(\n=80)\n\n\n\n\nEquation-Based Api\n\n\nemail.Top == 100\npassword.CenterY == forgot.CenterY\nlogin.Top \n= password.Bottom + 20\nlogin.Width == 75 % Width\n\n\n\n\nAll Generate \nnative\n NSLayoutConstraints \ud83c\udf89\n\n\nTry it!\n\n\nStevia is part of \nfreshOS\n iOS toolset. Try it in an example App ! \nDownload Starter Project\n\n\nReason\n\n\nWhy\n\n\nBecause \nnothing holds more truth than pure code\n \ud83e\udd13\n\nXibs and storyboards are \nheavy, hard to maintain, hard to merge.\n\nThey split the view concept into 2 separate files making debugging a \nnightmare\n  \n\n\nThere must be a better way\n\n\nHow\n\n\nBy creating a tool that makes Auto layout code finally \nreadable by a human being\n.\n\nBy coupling it with live code injection such as \ninjectionForXcode\n we can \ndesign views in real time\n\nView layout becomes \nfun\n, \nconcise\n, \nmaintainable\n and dare I say, \nbeautiful\n \u2764\ufe0f\n\n\nWhat\n\n\n\n\n[x] Pure Swift Auto Layout DSL.\n\n\n[x] Simple: the apis are just NSLayoutConstraint shortcuts, pure UIKit code, no voodoo magic.\n\n\n\n\nAdvantages of Stevia\n\n\n\n\n[x] Improves the readability of Auto Layout in code.\n\n\n[x] Concise yet flexible apis.\n\n\n[x] Type-Safe Visual Format language.\n\n\n[x] Decribe Horizontal \n vertical layout at the same time.\n\n\n[x] Supports Live reload, for faster iteration cycles.\n\n\n[x] Styling is more concise, reusable and can be composed.\n\n\n\n\nLogin View Example\n\n\nIn the project folder, you can find an example of a typical login view laid out in both native and Stevia for you to understand and compare the two approaches.\n\n\nAs a spoiler alert, the \nnumber of characters\n goes from 2380 to 1239 \n( ~ divided by 2)\n\n\nWrite \nHalf the code\n that is actually \n10X more expressive and maintainable\n !\n\n\nContributors\n\n\nYannickDot\n,  \nS4cha\n,  \nDamien\n,\n\nSnowcraft\n, \nMathieu-o\n\n\nSwift Version\n\n\nSwift 2 -\n version \n2.3.0\n\nSwift 3 -\n version \n3.2.0\n\nSwift 4 -\n version \n4.0.0\n\n\nBackers\n\n\nLike the project? Offer coffee or support us with a monthly donation and help us continue our activities :)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSponsors\n\n\nBecome a sponsor and get your logo on our README on Github with a link to your site :)", 
            "title": "Overview"
        }, 
        {
            "location": "/#visual-layout-api", 
            "text": "layout(\n    100,\n    |-email-| ~ 80,\n    8,\n    |-password-forgot-| ~ 80,\n     =20,\n    |login| ~ 80,\n    0\n)", 
            "title": "Visual Layout Api"
        }, 
        {
            "location": "/#chainable-api", 
            "text": "email.top(100).left(8).right(8).width(200).height(44)\nalignHorizontally(password, forgot)\nimage.fillContainer()\nbutton.centerInContainer().size(50%)\nequalWidths(email, password)\nimage.width( =80)", 
            "title": "Chainable Api"
        }, 
        {
            "location": "/#equation-based-api", 
            "text": "email.Top == 100\npassword.CenterY == forgot.CenterY\nlogin.Top  = password.Bottom + 20\nlogin.Width == 75 % Width  All Generate  native  NSLayoutConstraints \ud83c\udf89", 
            "title": "Equation-Based Api"
        }, 
        {
            "location": "/#try-it", 
            "text": "Stevia is part of  freshOS  iOS toolset. Try it in an example App !  Download Starter Project", 
            "title": "Try it!"
        }, 
        {
            "location": "/#reason", 
            "text": "", 
            "title": "Reason"
        }, 
        {
            "location": "/#why", 
            "text": "Because  nothing holds more truth than pure code  \ud83e\udd13 \nXibs and storyboards are  heavy, hard to maintain, hard to merge. \nThey split the view concept into 2 separate files making debugging a  nightmare     There must be a better way", 
            "title": "Why"
        }, 
        {
            "location": "/#how", 
            "text": "By creating a tool that makes Auto layout code finally  readable by a human being . \nBy coupling it with live code injection such as  injectionForXcode  we can  design views in real time \nView layout becomes  fun ,  concise ,  maintainable  and dare I say,  beautiful  \u2764\ufe0f", 
            "title": "How"
        }, 
        {
            "location": "/#what", 
            "text": "[x] Pure Swift Auto Layout DSL.  [x] Simple: the apis are just NSLayoutConstraint shortcuts, pure UIKit code, no voodoo magic.", 
            "title": "What"
        }, 
        {
            "location": "/#advantages-of-stevia", 
            "text": "[x] Improves the readability of Auto Layout in code.  [x] Concise yet flexible apis.  [x] Type-Safe Visual Format language.  [x] Decribe Horizontal   vertical layout at the same time.  [x] Supports Live reload, for faster iteration cycles.  [x] Styling is more concise, reusable and can be composed.", 
            "title": "Advantages of Stevia"
        }, 
        {
            "location": "/#login-view-example", 
            "text": "In the project folder, you can find an example of a typical login view laid out in both native and Stevia for you to understand and compare the two approaches.  As a spoiler alert, the  number of characters  goes from 2380 to 1239  ( ~ divided by 2)  Write  Half the code  that is actually  10X more expressive and maintainable  !", 
            "title": "Login View Example"
        }, 
        {
            "location": "/#contributors", 
            "text": "YannickDot ,   S4cha ,   Damien , Snowcraft ,  Mathieu-o", 
            "title": "Contributors"
        }, 
        {
            "location": "/#swift-version", 
            "text": "Swift 2 -  version  2.3.0 \nSwift 3 -  version  3.2.0 \nSwift 4 -  version  4.0.0", 
            "title": "Swift Version"
        }, 
        {
            "location": "/#backers", 
            "text": "Like the project? Offer coffee or support us with a monthly donation and help us continue our activities :)", 
            "title": "Backers"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Become a sponsor and get your logo on our README on Github with a link to your site :)", 
            "title": "Sponsors"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nCocoaPods\n\n\npod 'SteviaLayout'\nuse_frameworks!\n\n\n\n\nCarthage\n\n\ngithub \nfreshOS/Stevia\n\n\n\n\n\n\n\n\n\nCreate a \nCartfile\n file at the root of your project folder\n\n\n\n\n\n\nAdd \ngithub \"freshOS/Stevia\"\n to your Cartfile\n\n\n\n\n\n\nRun \ncarthage update\n\n\n\n\n\n\nDrag and drop \nStevia.framework\n from \n/Carthage/Build/iOS/\n to Linked frameworks and libraries in Xcode (Project\nTarget\nGeneral\nLinked frameworks and libraries)\n\n\n\n\n\n\nAdd new run script (Project\nTarget\nBuild Phases\n+\n New run script phase) \n/usr/local/bin/carthage copy-frameworks\n\n\n\n\n\n\nAdd Input files \n$(SRCROOT)/Carthage/Build/iOS/Stevia.framework\n\n\n\n\n\n\nThere you go!\n\n\nManual\n\n\nCopy Stevia source files to your Xcode project", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#cocoapods", 
            "text": "pod 'SteviaLayout'\nuse_frameworks!", 
            "title": "CocoaPods"
        }, 
        {
            "location": "/installation/#carthage", 
            "text": "github  freshOS/Stevia     Create a  Cartfile  file at the root of your project folder    Add  github \"freshOS/Stevia\"  to your Cartfile    Run  carthage update    Drag and drop  Stevia.framework  from  /Carthage/Build/iOS/  to Linked frameworks and libraries in Xcode (Project Target General Linked frameworks and libraries)    Add new run script (Project Target Build Phases +  New run script phase)  /usr/local/bin/carthage copy-frameworks    Add Input files  $(SRCROOT)/Carthage/Build/iOS/Stevia.framework    There you go!", 
            "title": "Carthage"
        }, 
        {
            "location": "/installation/#manual", 
            "text": "Copy Stevia source files to your Xcode project", 
            "title": "Manual"
        }, 
        {
            "location": "/ViewHierarchy/", 
            "text": "sv(\n    subview1,\n    subview2,\n    subview3\n)\n\n\n\n\nsv([])\n and \nsv()\n are essentially shortcuts that call \naddSubview()\n and\n\nview.translatesAutoresizingMaskIntoConstraints = false\n\n\nIt also has the benefit of being \nvery visual\n so that your can actually \nsee\n what the view hierarchy is.\nThis is especially true for nested hierarchies :\n\n\nsv(\n    subview1,\n    subview2.sv(\n        nestedView1,\n        nestedView2\u0328\n    ),\n    subview3\n)", 
            "title": "View Hierarchy"
        }, 
        {
            "location": "/Layout/sizing/", 
            "text": "Width\n\n\nview.width(100)\n\n\n\n\nHeight\n\n\nview.height(100)\n\n\n\n\nSize\n\n\nview.size(100)\n\n\n\n\nConstraining multiple views\n\n\nequalSizes(image1, image2, image2)\nequalWidths(field1, field2, field3, field4)\nequalHeights(button1, button2)\n\n\n\n\nConstraining a view to stay squared\n\n\nview.heightEqualsWidth()", 
            "title": "Sizing"
        }, 
        {
            "location": "/Layout/centering/", 
            "text": "Horizontally\n\n\nimageView.centerHorizontally()\nimageView.centerHorizontally(20) //offset\n\n\n\n\nVertically\n\n\nimageView.centerVertically()\nimageView.centerVertically(20) //offset\n\n\n\n\nOn both axis\n\n\nimageView.centerInContainer()", 
            "title": "Centering"
        }, 
        {
            "location": "/Layout/filling/", 
            "text": "Horizontally\n\n\nview.fillHorizontally()\nview.fillHorizontally(m: 20) // padding\n\n\n\n\nVertically\n\n\nview.fillVertically()\nview.fillVertically(m: 20) // padding\n\n\n\n\nAll container\n\n\nview.fillContainer()\nview.fillContainer(20) // Padding", 
            "title": "Filling"
        }, 
        {
            "location": "/Layout/aligning/", 
            "text": "Horizontally\n\n\nalignHorizontally(avatar,name,followButton)\n\n\n\n\nVertically\n\n\nalignVertically(title,subtitle,text)\n\n\n\n\nTops\n\n\nalignTops(title,subtitle,text)\n\n\n\n\nBottoms\n\n\nalignBottoms(title,subtitle,text)\n\n\n\n\nRights\n\n\nalignRights(title,subtitle,text)\n\n\n\n\nLefts\n\n\nalignLefts(title,subtitle,text)\n\n\n\n\nAlign the center of one view with another one :\n\n\nalignCenter(view1, with: view2)\n\n\n\n\nIn the example above of a follow Cell, here is how the layout code would look like :\n\n\n|-avatar-15-name-20-followButton-|\nalignHorizontally(avatar,name,followButton)\n\n\n\n\nBut \n|-avatar-15-name-20-followButton-|\n actually \nreturns the array of views!!!\n so we can write it in one \nsingle\n statement :\n\n\nalignHorizontally(|-avatar-15-name-20-followButton-|)\n\n\n\n\n\ud83c\udf89\ud83c\udf89\ud83c\udf89", 
            "title": "Aligning"
        }, 
        {
            "location": "/Layout/following/", 
            "text": "The typical example of this is when we want to have a button on top of an image.\n\n\nbutton.followEdges(imageView)", 
            "title": "Following another View"
        }, 
        {
            "location": "/Layout/horizontal/", 
            "text": "This is intended to look like \nApple's visual format\n, so you should be very familiar with the syntax.\nStevia only removes the \n[]\n and the String.\n\n\nStick a label to the left of the screen\n\n\n|label\n\n\n\n\nWith the default margin (8)\n\n\n|-label\n\n\n\n\nWith a custom margin\n\n\n|-42-label\n\n\n\n\nJust to be very clear we want to \nemphasize\n that this is \npure syntactic sugar\n.\nThis equivalent of the following using the chainable api :\n\n\nlabel.left(42)\n\n\n\n\nWhich in turn will create \nNative Autolayout constraints\n :\n\n\nlabel.superview?.addConstraint(\n  NSLayoutConstraint(\n    item: label,\n    attribute:.Left,\n    relatedBy: .Equal,\n    toItem: label.superview!,\n    attribute:.Left,\n    multiplier: 1,\n    constant: 42\n  )\n)\n\n\n\n\nCombine all at once.\n\n\n|-avatar-15-name-20-followButton-|", 
            "title": "Horizontal"
        }, 
        {
            "location": "/Layout/vertical/", 
            "text": "avatar.top(50)\n\n\n\n\n==\n\n\nlayout(\n    50,\n    avatar\n  )\n\n\n\n\nWhile using \nlayout\n for a single element might seem a bit overkill, it really \nshines\n when \ncombined with horizontal layout.\n\nThen we have the full \nlayout in one place\n (hence the name).\n\n\nlayout(\n    50,\n    |-15-avatar.size(60)\n  )\n\n\n\n\nThe avatar is 50px from the top with a left margin of 15px and a size of 60px\n\n\nAnother great example is the login view, representable in \none\n single statement !\n\n\nlayout(\n    100,\n    |-email-| ~ 80,\n    8,\n    |-password-| ~ 80,\n    \n,\n    |login| ~ 80,\n    0\n)\n\n\n\n\nIn case you wonder \n~\n operator == \n.height(x)\n, it's just more readable in a layout statement that way.\n\n\nChainable Api\n\n\nThe avatar example above could've been written that way using the chainable api :\n\n\navatar.top(50).left(15).size(50)\n\n\n\n\nUsing \nlayout\n is just clearer in most of the cases but it's yours to choose which way you prefer :)", 
            "title": "Vertical"
        }, 
        {
            "location": "/Layout/vertical/#chainable-api", 
            "text": "The avatar example above could've been written that way using the chainable api :  avatar.top(50).left(15).size(50)  Using  layout  is just clearer in most of the cases but it's yours to choose which way you prefer :)", 
            "title": "Chainable Api"
        }, 
        {
            "location": "/Layout/flexibleMargins/", 
            "text": "Flexible margins can be used exactly like regular margins:\n\n\nWith chainable Api\n\n\nview.top(\n=5)\nview.left(\n=20)\nview.bottom(\n=10)\nview.right(\n=15)\nview.width(\n=45)\nview.height(\n=100)\n\n\n\n\nIn layout calls\n\n\nlayout(\n    5,\n    |-label-(\n=5)-|,\n    \n=20,\n    separator ~ (\n=10),\n    0\n)", 
            "title": "Flexible"
        }, 
        {
            "location": "/Layout/flexibleMargins/#with-chainable-api", 
            "text": "view.top( =5)\nview.left( =20)\nview.bottom( =10)\nview.right( =15)\nview.width( =45)\nview.height( =100)", 
            "title": "With chainable Api"
        }, 
        {
            "location": "/Layout/flexibleMargins/#in-layout-calls", 
            "text": "layout(\n    5,\n    |-label-( =5)-|,\n     =20,\n    separator ~ ( =10),\n    0\n)", 
            "title": "In layout calls"
        }, 
        {
            "location": "/Layout/percentage/", 
            "text": "view.top(5%)\nview.left(20%)\nview.bottom(10%)\nview.right(15%)\nview.width(45%)\nview.height(100%)\nview.Height == 47 % button.Width", 
            "title": "Percentage"
        }, 
        {
            "location": "/Layout/equations/", 
            "text": "Tricky layout cases can be described as equations.\n\n\nbutton.CenterY == avatar.Bottom - 4\nlabel.Width \n= button.Width * 3\nlabel.Height == (button.Width / 7) + 3\nbutton.Left \n= image.Right - 20\nimage.Height \n= 100\nview.Top == 10\n\n\n\n\nThe result is a native NSLayoutConstraint. So you can modify priority like so :\n\n\n(label.Width == button.Width * 3).priority = 1000 // Making this a required constraint.", 
            "title": "Equations"
        }, 
        {
            "location": "/Layout/priorities/", 
            "text": "There is no special Stevia api for priorities.\nIn order to set them, you need to use the good'ol standard api :)\nBy default, Stevia constraints are created with a priority of \n751\n.\n\n\nlet c = NSLayoutConstraint(item: v, attribute: .Top, relatedBy: .Equal, toItem: v, attribute: .Top, multiplier: 1, constant: 0)\nc.priority = 1000 // Make a constraint `required`\naddConstraint(c)\n\n\n\n\n(label.Width == button.Width * 3).priority = 1000 // Making this a required constraint.\n\nlet constraint == view.Height = 50 % Height\n// later..\nconstraint.priority = 750", 
            "title": "Priorities"
        }, 
        {
            "location": "/styling/", 
            "text": "Well, just call \nstyle\n on a UIView subclass :\n\n\nIn-line\n for small or unique styles\n\n\ndetail.style { l in\n  l.numberOfLines = 0\n  l.textAlignment = .Center\n  l.textColor = .blueColor()\n  l.text = NSLocalizedString(\nNeedPetMessage\n, comment: \n)\n}\n\n\n\n\nOr in a separate to make them reusable\n\n\n// My style method, kinda like CSS\nfunc detailStyle(l:UILabel) {\n  l.numberOfLines = 0\n  l.textAlignment = .Center\n  l.textColor = .blueColor()\n  l.text = NSLocalizedString(\nNeedPetMessage\n, comment: \n)\n}\n\n// Later\n{\n  // Set my style\n  detail.style(detailStyle)\n}\n\n\n\n\nThis is the \npreferred\n way because the styles become \nreusable\n and \ncomposable\n: you can chain them!\nYou can even create a Style File grouping high level functions for common styles.\nUsage then becomes very similar to CSS!", 
            "title": "Styling"
        }, 
        {
            "location": "/changingConstraints/", 
            "text": "After laying out a view once, how do I change some constraints ?\n\n\nSimple Changes\n\n\n// Initial layout\nimage.height(100)\n\n// And later on\nimage.heightConstraint?.constant = 200\n\n\n\n\nThose getters are available for \nleft\n, \nright\n, \ntop\n, \nbottom\n, \nheight\n and \nwidth\n constraints\n\n\nComplex changes\n\n\nWhen we want to change the whole layout at once then the best strategy is to\nflush \n relayout.\n\n\n// Initial layout\nlayout(\n    100,\n    |-email-|,\n    8,\n    |-password-|,\n)\n\n// Flush all view constraints\nremoveConstraints(constraints)\n\n// Re-apply different layout\nlayout(\n     |-password-|,\n     8,\n     |-44-email-100-|,\n     10\n )\n\n\n\n\nAnimating Changes\n\n\nTo animate a constraint is to change the constant property on it and then call self.layoutIfNeeded() in an animation block.\n\n\nAnimating with stevia is no different than native Autolayout\n\n\nIn both cases, animating the constraint change is as easy as calling \nlayoutIfNeeded\n in an animation block.\n\n\nUIView.animateWithDuration(2) {\n    self.layoutIfNeeded()\n}", 
            "title": "Changing Constraints"
        }, 
        {
            "location": "/changingConstraints/#simple-changes", 
            "text": "// Initial layout\nimage.height(100)\n\n// And later on\nimage.heightConstraint?.constant = 200  Those getters are available for  left ,  right ,  top ,  bottom ,  height  and  width  constraints", 
            "title": "Simple Changes"
        }, 
        {
            "location": "/changingConstraints/#complex-changes", 
            "text": "When we want to change the whole layout at once then the best strategy is to\nflush   relayout.  // Initial layout\nlayout(\n    100,\n    |-email-|,\n    8,\n    |-password-|,\n)\n\n// Flush all view constraints\nremoveConstraints(constraints)\n\n// Re-apply different layout\nlayout(\n     |-password-|,\n     8,\n     |-44-email-100-|,\n     10\n )", 
            "title": "Complex changes"
        }, 
        {
            "location": "/changingConstraints/#animating-changes", 
            "text": "To animate a constraint is to change the constant property on it and then call self.layoutIfNeeded() in an animation block.  Animating with stevia is no different than native Autolayout  In both cases, animating the constraint change is as easy as calling  layoutIfNeeded  in an animation block.  UIView.animateWithDuration(2) {\n    self.layoutIfNeeded()\n}", 
            "title": "Animating Changes"
        }, 
        {
            "location": "/cells/", 
            "text": "For both tableView cells and UICollectionView cells, \nsv\n adds the subviews to the \ncontentView\n, as recommended.\n\n\nExample\n\n\nclass FriendCell: UITableViewCell {\n\n    let avatar = UIImageView()\n    let name = UILabel()\n\n    required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder)}\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n        sv(\n            avatar,\n            name.style(nameStyle)\n        )\n\n        avatar.size(50).centerVertically()\n        alignHorizontally(|-20-avatar-name-20-|)\n    }\n\n    func nameStyle(l:UILabel) {\n        l.font = .systemFontOfSize(24)\n        l.textColor = .blueColor()\n    }\n}\n\n\n\n\nThen in the viewController you do the usual \nregister\n and \ndequeue\n :)\n\n\n// In viewDidLoad, register your cell for dequeue\ntableView.registerClass(FriendCell.self, forCellReuseIdentifier: \nFriendCell\n)\n\n// Later, in cellForRowAtIndexPath\nlet cell = tableView.dequeueReusableCellWithIdentifier(\nFriendCell\n, forIndexPath: indexPath) as! FriendCell", 
            "title": "TableView Cells & CollectionView Cells"
        }, 
        {
            "location": "/cells/#example", 
            "text": "class FriendCell: UITableViewCell {\n\n    let avatar = UIImageView()\n    let name = UILabel()\n\n    required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder)}\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n        sv(\n            avatar,\n            name.style(nameStyle)\n        )\n\n        avatar.size(50).centerVertically()\n        alignHorizontally(|-20-avatar-name-20-|)\n    }\n\n    func nameStyle(l:UILabel) {\n        l.font = .systemFontOfSize(24)\n        l.textColor = .blueColor()\n    }\n}  Then in the viewController you do the usual  register  and  dequeue  :)  // In viewDidLoad, register your cell for dequeue\ntableView.registerClass(FriendCell.self, forCellReuseIdentifier:  FriendCell )\n\n// Later, in cellForRowAtIndexPath\nlet cell = tableView.dequeueReusableCellWithIdentifier( FriendCell , forIndexPath: indexPath) as! FriendCell", 
            "title": "Example"
        }, 
        {
            "location": "/viewFromController/", 
            "text": "Once again, this is not Stevia-related per se but since we're not generally used to writing views in code, then some explanation might be useful  \ud83e\udd13\n\n\nIt goes like this :\n\n- 1. Keeping a reference to our custom view.\n\n- 2. Loading our view instead of the bare default one by overriding \nloadView\n\n\nclass MyViewController: UIViewController {\n\n    let myCustomView = MyCustomView() // 1\n\n    override func loadView() { // 2\n      view = myCustomView\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        myCustomView.loginButton.addTarget(self, action: #selector(login), for: .touchUpInside)\n    }\n\n    @objc\n    func login() {\n      // do something\n    }\n}", 
            "title": "Getting views from the controller"
        }, 
        {
            "location": "/nested/", 
            "text": "We believe complex nested views should be refactored into their own \nUIView\n subclasses.\n\n\nFor instance, if out App is using a form field multiple times, it is wise to extract it in its own UIView subclass like so:\n\n\nclass CustomField: UIView {\n\n    let icon = UIImageView()\n    let field = UITextField()\n    let image = UIImageView()\n\n    convenience init() {\n        self.init(frame:CGRect.zero)\n\n        sv(\n            icon,\n            field,\n            image\n        )\n\n        alignHorizontally(|-icon.size(40).centerVertically()-field-image.size(40)-|)\n\n        backgroundColor = .whiteColor()\n        layer.cornerRadius = 5\n        layer.shadowOffset = CGSize(width: 2, height:2)\n        layer.shadowOpacity = 0.5\n        icon.backgroundColor = .grayColor()\n        image.backgroundColor = .blackColor()\n    }\n}\n\n\n\n\nAnd then we can use it easily like so whenever we need it:\n\n\nclass LoginView: UIView {\n\n    let usernameField = CustomField()\n    let passwordField = CustomField()", 
            "title": "Complex nested layout"
        }, 
        {
            "location": "/knownIssues/", 
            "text": "Expression was to complex to be solved in reasonable time\n\n\n\"Expression was to complex to be solved in reasonable time\"\n can happen in Stevia, since the swift compiler has a hard time finding the right \n-\n operator overload. However it usually only happens with very long horizontal layouts with multiple margins.\n\n\nHere are three valid solutions for avoiding this annoying compiler error. All of them aim at making it easier for the compiler to find the right \n-\n operator version.\n\n\n// Solution 1\n// Putting margins in separate variables\nlet m:CGFloat = 15\nlet m2:CGFloat = 20\n|-m-avatarImageView-m-userNameLabel-\n-likeButton-m2-|\n\n// Or Provide the type for margins to help the compiler\n|-CGFloat(15)-avatarImageView-CGFloat(15)-userNameLabel-\n-likeButton-CGFloat(20)-|\n\n// Solution 2\n// Breaking it into smaller layouts\n|-15-avatarImageView-15-userNameLabel\nlikeButton-20-|\n\n// Solution 3\n// Using a double dash `--` version so that the compiler doesn't have to go through\n// all the existing `-` operator overloads defined by UIKit/Foundation\n|-15--avatarImageView--15--userNameLabel--\n--likeButton--20-|", 
            "title": "Known Issues"
        }, 
        {
            "location": "/knownIssues/#expression-was-to-complex-to-be-solved-in-reasonable-time", 
            "text": "\"Expression was to complex to be solved in reasonable time\"  can happen in Stevia, since the swift compiler has a hard time finding the right  -  operator overload. However it usually only happens with very long horizontal layouts with multiple margins.  Here are three valid solutions for avoiding this annoying compiler error. All of them aim at making it easier for the compiler to find the right  -  operator version.  // Solution 1\n// Putting margins in separate variables\nlet m:CGFloat = 15\nlet m2:CGFloat = 20\n|-m-avatarImageView-m-userNameLabel- -likeButton-m2-|\n\n// Or Provide the type for margins to help the compiler\n|-CGFloat(15)-avatarImageView-CGFloat(15)-userNameLabel- -likeButton-CGFloat(20)-|\n\n// Solution 2\n// Breaking it into smaller layouts\n|-15-avatarImageView-15-userNameLabel\nlikeButton-20-|\n\n// Solution 3\n// Using a double dash `--` version so that the compiler doesn't have to go through\n// all the existing `-` operator overloads defined by UIKit/Foundation\n|-15--avatarImageView--15--userNameLabel-- --likeButton--20-|", 
            "title": "Expression was to complex to be solved in reasonable time"
        }, 
        {
            "location": "/liveReload/", 
            "text": "Live Reload\n\n\nYou can even enable \nlive reload\n during your development phase! \ud83c\udf89\ud83c\udf89\ud83c\udf89\n\n\nStevia + \nInjectionForXcode\n = \n3 (WhoNeedsReactNative??) \ud83d\ude80\n\n\n\n\nJust Cmd+S and you can dev live in the simulator !\n\n\n\n\nDownload \nInjectionForXcode\n.\n\n\nInstall it \n Launch it.\n\n\nRestart Xcode.\n\n\nClick on  \nInject Source\n once.\n\n\nEnable the \nFile Watcher\n so that Cmd+S triggers an injection.\n\n\n\n\nIn order to support \nlive reload\n with InjectionForXcode, we simply need to tell our ViewController to rebuild a view after an injection occured.\n\n\nin \nviewDidLoad()\n add :\n\n\non(\nINJECTION_BUNDLE_NOTIFICATION\n) {\n    self.view = MyView()\n}\n\n\n\n\nCurrently InjectionForXcode doesn't seem to swizzle \ninit\n methods for some reason. So we have to move our view code in another methods\n\n\nconvenience init() {\n    self.init(frame:CGRect.zero)\n    //View code\n}\n\n\n\n\nBecomes\n\n\nconvenience init() {\n    self.init(frame:CGRect.zero)\n    render()\n}\n\nfunc render() {\n  //View code\n}\n\n\n\n\n\nAnd Voila :)", 
            "title": "Live Reload"
        }, 
        {
            "location": "/liveReload/#live-reload", 
            "text": "You can even enable  live reload  during your development phase! \ud83c\udf89\ud83c\udf89\ud83c\udf89  Stevia +  InjectionForXcode  =  3 (WhoNeedsReactNative??) \ud83d\ude80   Just Cmd+S and you can dev live in the simulator !   Download  InjectionForXcode .  Install it   Launch it.  Restart Xcode.  Click on   Inject Source  once.  Enable the  File Watcher  so that Cmd+S triggers an injection.   In order to support  live reload  with InjectionForXcode, we simply need to tell our ViewController to rebuild a view after an injection occured.  in  viewDidLoad()  add :  on( INJECTION_BUNDLE_NOTIFICATION ) {\n    self.view = MyView()\n}  Currently InjectionForXcode doesn't seem to swizzle  init  methods for some reason. So we have to move our view code in another methods  convenience init() {\n    self.init(frame:CGRect.zero)\n    //View code\n}  Becomes  convenience init() {\n    self.init(frame:CGRect.zero)\n    render()\n}\n\nfunc render() {\n  //View code\n}  And Voila :)", 
            "title": "Live Reload"
        }
    ]
}